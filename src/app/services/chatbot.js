const {
  areObjectValid,
  cosineSimilarity,
  generateNewQuery,
} = require("../../common/functionCommon");
const faqCollection = require("../models/faqtuyensinh");
const chatlogCollection = require("../models/chatlog");
const { OpenAI } = require("openai");
const mammoth = require("mammoth");
const fs = require("fs-extra");
require("dotenv").config();
require("@tensorflow/tfjs-node");

const { getSearchData } = require("./singleton/initializeSearch");

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

// findBestMatch in FAQ
const findBestMatch = async (userQuery) => {
  try {
    if (!userQuery) throw new Error("Data is invalid");
    const { encoder, faissIndex, faqEmbeddings } = getSearchData();

    const faqData = await faqCollection.find({}, "-_id Question").lean();

    const convertQuery = [userQuery];
    const queryEmbedding = await Promise.all(
      convertQuery.map(async (q) => {
        const embedding = await encoder(q, { pooling: "mean" });
        return embedding.tolist()[0];
      })
    );
    const queryArray = Array.from(new Float32Array(queryEmbedding.flat()));

    const { labels, distances } = faissIndex.search(queryArray, 15);

    const faqEmbeddingsArray = faqEmbeddings;

    const topMatch = labels
      .map((item, index) => ({
        match: faqData[item]?.Question || "D·ªØ li·ªáu l·ªói",
        score: cosineSimilarity(
          queryArray,
          Array.from(faqEmbeddingsArray[item] || [])
        ),
      }))
      .sort((a, b) => b.score - a.score);

    // console.log(
    //   "üîπ Top 5 Match:",
    //   topMatch.slice(0, Math.min(5, topMatch.length))
    // );

    return topMatch.slice(0, Math.min(5, topMatch.length));
  } catch (error) {
    throw new Error(error.message);
  }
};
// const findBestMatch = async (userQuery) => {
//   try {
//     if (!userQuery) throw new Error("Data is invalid");

//     // L·∫•y danh s√°ch c√¢u h·ªèi t·ª´ MongoDB
//     const faqData = await faqCollection.find({}, "-_id Question").lean();
//     const faqQuestions = faqData.map((doc) => doc.Question);

//     // L·∫•y d·ªØ li·ªáu t·ª´ singleton ho·∫∑c n∆°i l∆∞u tr·ªØ
//     const { encoder, faissIndex, faqEmbeddings } = getSearchData();
//     if (!faqEmbeddings) {
//       throw new Error("faqEmbeddings kh√¥ng ƒë∆∞·ª£c kh·ªüi t·∫°o.");
//     }

//     const faqItem = "Khi n√†o c√≥ gi·∫•y b√°o tr√∫ng tuy·ªÉn";
//     const userInput = "Khi n√†o c√≥ gi·∫•y b√°o tr√∫ng tuy·ªÉn";

//     const item1 = await encoder([faqItem]); // Encode ri√™ng
//     const item2 = await encoder([userInput, faqItem]); // Encode chung

//     console.log("Embedding for faqItem (single):", item1.data);

//     // L·∫•y embedding c·ªßa c√¢u th·ª© hai trong `item2`
//     const dims = item2.dims[2]; // K√≠ch th∆∞·ªõc c·ªßa m·ªói embedding vector
//     const clsVector = item2.data.slice(dims, dims * 2); // L·∫•y vector [CLS] c·ªßa c√¢u th·ª© hai

//     console.log("Embedding for faqItem (from batch):", clsVector);

//     // cosineSimilarity(item1.data, clsVectorAtIndex122);

//     // console.log("query", [userQuery]);

//     const queryEmbeddings = await encoder([userQuery]);
//     const embeddingsData = queryEmbeddings.data;

//     // K√≠ch th∆∞·ªõc c·ªßa embedding
//     const numSentences = queryEmbeddings.dims[0]; // S·ªë l∆∞·ª£ng c√¢u truy v·∫•n
//     const embeddingSize = queryEmbeddings.dims[2]; // K√≠ch th∆∞·ªõc embedding cho m·ªói c√¢u

//     // M·∫£ng ch·ª©a t·∫•t c·∫£ c√°c embedding [CLS] c·ªßa c√°c c√¢u truy v·∫•n
//     const processedQueryEmbeddings = new Float32Array(
//       numSentences * embeddingSize
//     );

//     for (let i = 0; i < numSentences; i++) {
//       // T√≠nh to√°n ch·ªâ m·ª•c b·∫Øt ƒë·∫ßu c·ªßa embedding [CLS] cho c√¢u truy v·∫•n i
//       const clsEmbeddingStartIndex =
//         i * (queryEmbeddings.dims[1] * embeddingSize); // D√≤ng * s·ªë token * k√≠ch th∆∞·ªõc embedding
//       const clsEmbedding = embeddingsData.slice(
//         clsEmbeddingStartIndex,
//         clsEmbeddingStartIndex + embeddingSize
//       );

//       // L∆∞u embedding [CLS] c·ªßa c√¢u truy v·∫•n v√†o m·∫£ng processedQueryEmbeddings
//       for (let j = 0; j < embeddingSize; j++) {
//         processedQueryEmbeddings[i * embeddingSize + j] = clsEmbedding[j];
//       }
//     }

//     const queryArrayNormal = Array.from(processedQueryEmbeddings);

//     const { labels, distances } = faissIndex.search(queryArrayNormal, 3);

//     // const converQueryArray = Array.from(new Float32Array(queryArray));
//     // console.log(queryArray);
//     // console.log("labels[0]", labels[0]);
//     // console.log("faqEmbeddingsArray", faqEmbeddingsArray);
//     // console.log(
//     //   "faqEmbeddingsArray with labels",
//     //   faqEmbeddingsArray[labels[0]]
//     // );

//     // console.log("Shape of faqEmbeddingsArray:", faqEmbeddingsArray.shape);

//     // console.log(labels[0]);

//     // T√≠nh to√°n ch·ªâ s·ªë b·∫Øt ƒë·∫ßu c·ªßa vector th·ª© 122 trong m·∫£ng
//     // const faqEmbeddingsArray = faqEmbeddings;
//     // const index = 122;
//     // const startIndex = index * embeddingSize;
//     // // Tr√≠ch xu·∫•t vector [CLS] t·∫°i v·ªã tr√≠ 122
//     // let clsVectorAtIndex122 = faqEmbeddingsArray.slice(
//     //   startIndex,
//     //   startIndex + embeddingSize
//     // );

//     // In ra vector ƒë√£ tr√≠ch xu·∫•t
//     // console.log(queryArrayNormal);
//     // console.log(clsVectorAtIndex122);

//     // console.log(
//     //   "cosin",
//     //   cosineSimilarity(queryArrayNormal, Array.from(clsVectorAtIndex122))
//     // );

//     const topMatch = labels.map((item, index) => ({
//       match: faqQuestions[item],
//       score: 0,
//     }));

//     console.log("topmatch", topMatch);

//     // return {
//     //   match: faqQuestions[bestMatchIndex],
//     //   score: bestMatchScore, // ƒê·ªô t∆∞∆°ng ƒë·ªìng
//     // };
//   } catch (error) {
//     console.log(error);

//     throw new Error(error.message);
//   }
// };

// Search in document

const searchInDocument = async (query, docPath) => {
  if (!fs.existsSync(docPath)) return null;
  try {
    const { value: text } = await mammoth.extractRawText({ path: docPath });
    const matches = text
      .split("\n")
      .filter((p) => p.toLowerCase().includes(query.toLowerCase()));
    return matches.length ? matches.slice(0, 3).join("\n") : null;
  } catch (error) {
    throw new Error("L·ªói khi ƒë·ªçc file: " + error.message);
  }
};

// Search in GPT-4
const generateGpt4Response = async (data, userIP) => {
  try {
    // if (typeof userQuery !== "string" || !userQuery)
    //   throw new Error("Data is invalid");
    if (areObjectValid(["match"], data)) {
    }
    console.log(data);

    const additionalData = await Promise.all(
      data.data.map(async (item) => {
        const answer = await faqCollection.findOne({ Question: item.match });
        return answer.Answer;
      })
    );
    const contextInfo =
      additionalData.length > 0
        ? `\n\nTh√¥ng tin tham kh·∫£o:\n${additionalData.join("\n")}`
        : "";

    const prompt = `M·ªôt sinh vi√™n h·ªèi: ${data.userQuery}\n\nD·ª±a tr√™n th√¥ng tin t√¨m ƒë∆∞·ª£c tr√™n internet v√† d·ªØ li·ªáu c√≥ s·∫µn, h√£y cung c·∫•p m·ªôt c√¢u tr·∫£ l·ªùi h·ªØu √≠ch, ng·∫Øn g·ªçn v√† th√¢n thi·ªán. D·∫´n ngu·ªìn n·∫øu c√≥ th·ªÉ.${contextInfo}`;

    const response = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [
        {
          role: "system",
          content:
            "B·∫°n l√† m·ªôt tr·ª£ l√Ω tuy·ªÉn sinh tr∆∞·ªùng ƒë·∫°i h·ªçc C√¥ng Ngh·ªá Giao Th√¥ng V·∫≠n T·∫£i (UTT) h·ªØu √≠ch.",
        },
        { role: "user", content: prompt },
      ],
      max_tokens: 3500,
    });

    const newData = {
      user_ip: userIP,
      timestamp: new Date(),
      user_message: data.userQuery,
      bot_response: response.choices[0].message.content,
    };
    const responseGPT = await saveChatLog(newData);

    return responseGPT;
  } catch (error) {
    throw new Error(error.message);
  }
};

// save FAQ data
const saveFAQData = async (data) => {
  try {
    if (!areObjectValid(["Question", "Answer"], data)) {
      throw new Error("Data is invalid");
    }
    const createFAQ = await faqCollection.insertOne(data);
    return createFAQ;
  } catch (error) {
    throw new Error(error.message);
  }
};

// Save chat log
const saveChatLog = async (data) => {
  try {
    if (!areObjectValid(["user_ip", "user_message", "bot_response"], data)) {
      throw new Error("Data is invalid");
    }
    const createChatlog = await chatlogCollection.insertOne({
      user_ip: data.user_ip,
      timestamp: new Date(),
      user_message: data.user_message,
      bot_response: data.bot_response,
      is_good: !data.feedback,
      problem_detail: data.feedback || "",
    });
    return createChatlog;
  } catch (error) {
    throw new Error(error.message);
  }
};

// save feedback
const saveFeedback = async (data) => {
  try {
    if (!areObjectValid(["id", "feedback"], data)) {
      throw new Error("Data is invalid");
    }
    const findFeedback = await chatlogCollection.findById(data.id);
    if (!findFeedback) {
      throw new Error("data not found");
    }
    const updateChatlog = await chatlogCollection.findByIdAndUpdate(
      findFeedback._id,
      {
        is_good: false,
        problem_detail: data.feedback,
      },
      { new: true }
    );

    return updateChatlog;
  } catch (error) {
    throw new Error(error.message);
  }
};

// Get all chat logs
const getAllChatLogs = async () => {
  try {
    return await chatlogCollection.find({}, "-__v").lean();
  } catch (error) {
    throw new Error(error.message);
  }
};

// Get all FAQ
const getAllFAQ = async () => {
  try {
    return await faqCollection.find({}, "-__v").lean();
  } catch (error) {
    throw new Error(error.message);
  }
};

// delete FAQ
const deleteFaqById = async (id) => {
  try {
    if (id) {
      await faqCollection.findByIdAndDelete(id);
      return "Delete Success!";
    }
  } catch (error) {
    throw new Error(error.message);
  }
};

// delete ChatLog
const deleteChatLogById = async (id) => {
  try {
    if (id) {
      await chatlogCollection.findByIdAndDelete(id);
      return "Delete Success!";
    }
  } catch (error) {
    throw new Error(error.message);
  }
};

//generateBestMatch
const generateBestMatch = async (userQuery, question, userIP) => {
  const responseFaq = await faqCollection.findOne({
    Question: question,
  });

  const newData = {
    user_ip: userIP,
    timestamp: new Date(),
    user_message: userQuery,
    bot_response: responseFaq.Answer,
  };
  return await saveChatLog(newData);
};

// Handle user query
const handleUserQuery = async (userQuery, userIP) => {
  try {
    if (!userQuery) throw new Error("Data is invalid");
    const topMatch = await findBestMatch(userQuery);
    let response;
    const bestMatch = topMatch[0];

    if (bestMatch.score > 0.86) {
      response = generateBestMatch(userQuery, bestMatch.match, userIP);
    } else {
      const newQuery = generateNewQuery(userQuery);
      const topMatch = await findBestMatch(newQuery);
      const bestMatch = topMatch.reduce(
        (max, item) => (item.score > max.score ? item : max),
        { match: "", score: -Infinity }
      );
      if (bestMatch > 0.86) {
        response = generateBestMatch(userQuery, bestMatch.match, userIP);
      } else {
        response = topMatch;
      }
    }

    return response;
  } catch (error) {
    throw new Error(error.message);
  }
};

module.exports = {
  handleUserQuery,
  generateGpt4Response,
  saveFeedback,
  getAllChatLogs,
  getAllFAQ,
  deleteFaqById,
  deleteChatLogById,
};
